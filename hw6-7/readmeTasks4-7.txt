Задание 4
Добавьте в ваше приложение еще одну сущность. Создайте для нее таблицу и
отображение. Опишите некоторые поля данной сущности как заполняемые. К части
полей разрешите прямой доступ при использовании Hibernate, а к остальным – через
getter/setter. Соберите и запустите приложение. Проанализируйте, что запрашивает
Hibernate у базы данных

	Добавил сущность "Планета" создал таблицу и отображение. Поле accelerationOfGravity не 
	заносится в базу данных и заполняется не из базы т.к. помечена аннотацией @Transient. 
	Используя аннотацию @Access разрешил прямой доступ к полям id и name, к остальным через getter/setter.
	Приложение успешно запускается и заносит в базу необходимые поля.

	Запросы hibernate:
	Hibernate: create table T_PLANET (id bigint not null, circumference double precision, mass double precision, 
	name varchar(255), primary key (id)) engine=InnoDB
	Hibernate: insert into T_PLANET (circumference, mass, name, id) values (?, ?, ?, ?)

Задание 5
Измените вашу программу таким образом, чтобы вам не приходилось вносить
имена таблиц и полей в конфигурацию. Запустите приложение и проверьте, что все
функции для новой конфигурации работают корректно.

	Добавил класс CustomPhysicalNamingStrategy который изменяет имена таблиц и полей.
	Имя таблицы заносится в snake_case с добавлением префикса "T_" - (table)
	Имена полей заносятся в snake_case(Upper_case) с добавление префикса "F_" - (field)

Задание 6
Создайте разные сущности в вашем приложении, каждая из которых использовала
разный генератор идентификаторов. Извлеките идентификаторы из Persistent объектов
и выведите их на консоль.

	программа выводит идентификаторы из объектов:
	Person - sequence генератор (2-ой я удалил до выборки)
	Person id: 1
	Person id: 3
	Planet - uuid генератор
	Planet id: 402881e67758e505017758e50a670000
	Planet id: 402881e67758e505017758e50c460001
	Planet id: 402881e67758e505017758e50c4b0002
	PlanetSystem - native генератор
	PlanetSystem id: 1


Задание 7
Добавьте к существующим сущностям дополнительные поля (например: адрес,
город, почтовый код) и вынесите эту информацию в отдельный класс. Настройте
отображение и запустите приложение. Опишите ваши проблемы, возникшие в процессе
работы.

	Добавил класс адрес. Настроил отображение с помощью @Embedded  и @Embeddable.
	Программа выполняется, проблем не возникло